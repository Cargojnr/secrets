<%- include('layout') %>
<style>
  #tutorial-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    z-index: 99;
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
    visibility: visible;
    opacity: 1;
    pointer-events: auto; /* Enable interactions */
}

/* Tutorial container: Show without opacity transitions */
#tutorial-container {
    opacity: 1; /* Ensure it's visible immediately */
    pointer-events: auto; /* Allow interactions */
}

/* Remove the transition on tutorial step */
.tutorial-step {
  font-family: "Gloria Hallelujah", cursive;
    opacity: 1; /* Make sure it's visible immediately */
    color: #fff;
}

/* Tutorial Step: No transition, just show it directly */
.tutorial-step.hidden {
    opacity: 0;
}

.highlight {
    border: 3px solid #ffdd00; /* Yellow highlight */
    box-shadow: 0 0 10px rgba(255, 221, 0, 0.7); /* Glowing effect */
}


button.skip-btn {
    background: #ff4444;
    color: #fff;
    border: none;
    border-radius: 5px;
    padding: 10px 15px;
    cursor: pointer;
    margin-top: 10px;
}

button#next-step {
    padding: 10px 20px;
    font-size: 18px;
    background: linear-gradient(90deg, #ffcc00, #ff9900);
    border: none;
    border-radius: 10px;
    color: #222;
    cursor: pointer;
    margin: 10px;
    transition: transform 0.3s ease-in-out;
}

button.skip-btn:hover {
    background: #ff2222;
}

button.close-btn {
    background: #00ff00;
    font-size: 18px !important;
    color: #000;
    border: none;
    border-radius: 5px;
    padding: 10px 15px;
    cursor: pointer;
    margin-top: 10px;
}

button.close-btn:hover {
    background: #00cc00;
}


#tutorial-overlay.hidden {
    display: none;
}

#progress-bar-container {
    width: 100%;
    background-color: #e0e0e0;
    border-radius: 5px;
    margin: 10px auto;
}

#progress-bar {
    width: 0%;
    height: 5px;
    /* background-color: #76c7c0; */
     background: var(--primary-color);
    border-radius: 5px;
    transition: width 0.3s;
}

.highlight {
    border: 3px solid #ffdd00; /* Yellow highlight */
    box-shadow: 0 0 10px rgba(255, 221, 0, 0.7); /* Glowing effect */
}

.tooltip {
    position: absolute;
    /* bottom: 5rem; */
    /* z-index: 100; */
    background-color: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 5px 10px;
    border-radius: 5px;
    font-size: 12px;
    visibility: hidden;
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
}

/* Show Tooltip on Hover */
.tooltip.show {
    visibility: visible;
    opacity: 1;
}

/* .highlight */

</style>

<body data-theme="<%= theme %>" data-mode="<%= mode %>">
  <div class="jumbotron text-center">
    <div class="container">
  
      <% if (locals.dashboard){ %>
        <div id="tutorial-overlay" class="hidden">
          <div class="tutorial-step">
            <div class="tutorial-text">
                          <h2> <span style="text-transform: capitalize;"><%= username %></span> Welcome to our World of Anonymity!</h2>
              <p>This is a Safe Space, where you can find comfort and anonymous support.<br> Feel free to share or read secrets in a judgment-free zone.</p>
            </div>
  
              <div id="progress-bar-container">
                  <div id="progress-bar"></div>
              </div>
              <button id="next-step">Next</button>
              <button class="skip-btn">Skip</button>
          </div>
      </div>
      <form id="navigator">
        <button formaction="dashboard">
          Dashboard
          <div class="bottom-line"></div>
        </button>
        <button formaction="feeds">AnonymFeeds</button>
      </form>
      <div id="dashboard">
       
        <!-- <i class="fas fa-user-secret fa-6x"></i> -->
        <h4>
          Hey
          <span style="text-transform: uppercase;">
            <%= username %>
          </span>
        </h4>
        <h4>
          Your anonymous username is
          <span >@amebo<%= userId %></span>
        </h4>
        <center>
          <div class="server-msg">
            <h2><%= heading %></h2>
            <p><%= pGrph %></p>
          </div>
        </center>
        <% if (locals.secret) { %>
        <button id="toggleVisibility" aria-label="Toggle Visibility">
          <i id="visibilityIcon" class="fas fa-eye-low-vision"
            ></i
          >
        </button>
        <ul id="secrets">
          <% secret.forEach((sec)=> { %>
          <li class="secret">
            <div class="card sand">
              
              <p>
                <span class="content">
                  <% if (sec.secret.split(" ").length > 200) { %>
                    <%= sec.secret.substring(0, 250) + "..." %>
                  <% } else { %>
                    <%= sec.secret %>
                  <% } %>
                </span>
                <% if (sec.secret.split(" ").length > 200) { %>
                     <button
                    class="read"
                    style="
                      background: none;
                      font-size: 1rem;
                      padding: 0;
                      font-weight: bold;
                    "
                    data-full="<%= sec.secret %>"
                    data-truncated="<%= sec.secret.substring(0, 250) + '...' %>"
                  >
                    Read More
                  </button>
                 
                <% } %>
              </p>
              <form method="post" id="update">
                <input type="hidden" name="id" id="" value="<%= sec.id %>" />
                
                <button
                  class="edit"
                  type="submit"
                  formaction="/edit">
                  <abbr title="edit">
                  <i class="fas fa-file-pen"></i>
                </abbr>
               </button>
             

             
                <button
                  class="delete"
                  type="submit"
                  formaction="/delete">
                  <abbr title="delete">
                  <i class="fas fa-trash"></i>
                </abbr>
              </button>
           
              </form>
            </div>
          </li>
          <% }); %>

          <% if (locals.userAudio) { %>
            <% userAudio.forEach((audio) => { %>
              <li class="secret">
                <div id="audioContainer" class="card">
                 <audio class="audio-item" src="<%= audio.url %>" controls></audio>

                 <form method="post" id="update">
                  <input type="hidden" name="id" id="" value="<%= audio.id %>" />
                  
                  <button
                    class="delete"
                    type="submit"
                    formaction="/delete">
                    <abbr title="delete">
                    <i class="fas fa-trash"></i>
                  </abbr>
                </button>
             
                </form>
                </div>
              </li>
            <% }) %>
           
          <% } %>
        </ul>

        <script>
          document.addEventListener("DOMContentLoaded", () => {
       const toggleButton = document.getElementById("toggleVisibility");
       const visibilityIcon = document.getElementById("visibilityIcon");
       const cards = document.querySelectorAll(".card");
 
       toggleButton.addEventListener("click", () => {
         cards.forEach((card) => {
           card.classList.toggle("sand");
 
           if (card.classList.contains("sand")) {
             visibilityIcon.classList.replace("fa-eye", "fa-eye-low-vision");
           } else {
             visibilityIcon.classList.replace("fa-eye-low-vision", "fa-eye");
           }
         });
       });
     });
       </script>
        <% } %>
        <!-- <br> -->
        <abbr title="create"> 
        <button id="create" class="btn">
            <a
            href="/submit"
            class="share btn-dark btn-lg"
            role="button" >
          <i class="fas fa-plus"></i>
        </a> 
        </button>
      </abbr>
        <hr />
      </div>


        <div id="hot">
          <h2>Hot Pick For the Day🔥🔥🔥 </h2>
          <div class="hot">
            <div class="pinned-secret"></div> 
          </div>
        </div>
       
      

      <div id="trending">
        <h2>Trending Gist</h2>
        <div class="trending">
           <% if (locals.trendingGist) { %>
            <ul id="secrets">
              <% trendingGist.forEach((trending)=> { %>
              <li class="secret">
                <div class="trend-box card">
                  <p>
                    <span class="content">
                      <% if (trending.secret.split(" ").length > 20) { %>
                        <%= trending.secret.substring(0, 50) + "..." %>
                      <% } else { %>
                        <%= trending.secret.substring(0, 50) + "..."%>
                      <% } %>
                    </span>
                  </p>

                  <small style="text-align: right !important;"> ~~amebo<%= trending.user_id%>~~</small>

                  <a class="read" href="secret/<%= trending.id %>">See Gist</a>
                </div>
                 
              </li>
              <% }); %>
             
            </ul>
           <% } %>
           <div class="controls">
            <button><i class="fas fa-chevron-left"></i></button>
            <button><i class="fas fa-chevron-right"></i></button>
          </div>
        </div>
      </div>

      <div id="sections" class="sections-container">
        <h2 class="sections-title">Explore Your Space</h2>
        <form class="sections-cards" >
          <!-- Whisper Walls -->
          <!-- <button class="section-card whisper-wall" formaction="/section/love" data-action="/whisper-walls">
            <div class="icon-circle">
              <i class="fas fa-feather-alt fa-2x"></i>
            </div>
            <h3>Whisper Walls</h3>
            <p>Swipe and support whispers anonymously.</p>
          </button> -->

          <button class="section-card whisper-wall" formaction="/section/love" data-action="/whisper-walls">
            <div class="icon-circle">
              <i class="fas fa-feather-alt fa-2x"></i>
            </div>
            <h3>Heartbreaks & Relationship Advice</h3>
            <p>Swipe and support whispers anonymously.</p>
          </button>

          <!-- Mood Secrets -->
          <!-- <button class="section-card mood-secrets" formaction="random" data-action="/mood-secrets">
            <div class="icon-circle gradient-bg">
              <i class="fas fa-smile-beam fa-2x"></i>
            </div>
            <h3>Mood Secrets</h3>
            <p>Share secrets by mood. Feel the vibe.</p>
          </button> -->

          <button class="section-card mood-secrets" formaction="random" data-action="/mood-secrets">
            <div class="icon-circle gradient-bg">
              <i class="fas fa-smile-beam fa-2x"></i>
            </div>
            <h3>Random Confessions</h3>
            <p>Share secrets by mood. Feel the vibe.</p>
          </button>

          <!-- Support Pods -->
          <button class="section-card support-pods" data-action="/support-pods">
            <div class="icon-circle gradient-bg-alt">
              <i class="fas fa-hands-helping fa-2x"></i>
            </div>
            <h3>Support Pods</h3>
            <p>Join pods for empathetic conversations.</p>
          </button>

          <!-- Time Capsule -->
          <button class="section-card time-capsule" data-action="/time-capsule">
            <div class="icon-circle gradient-bg">
              <i class="fas fa-hourglass-half fa-2x"></i>
            </div>
            <h3>Time Capsule</h3>
            <p>Write secrets to open in the future.</p>
          </button>

          <!-- Inspirations & Confessions -->
          <button
            class="section-card inspirations-confessions"
            data-action="/inspirations"
          >
            <div class="icon-circle gradient-bg-alt">
              <i class="fas fa-sun fa-2x"></i>
            </div>
            <h3>Inspirations</h3>
            <p>Share stories that uplift and inspire.</p>
          </button>
        </form>
      </div>

      <script>
        const fetchTopDiscussedSecret = async () => {
    try {
      const response = await fetch("/top-discussed");
      const data = await response.json();
      const topSecret = data.topSecret;
    
      if (data.success) {
        showAnnouncement(topSecret);
      } else {
        console.log("No trending secret to display.");
      }
    } catch (error) {
      console.error("Error fetching top discussed secret:", error);
    }
    };
    
    const pinSecret = (topSecret) => {
    const pinnedSection = document.querySelector(".pinned-secret");
    pinnedSection.innerHTML = `
      <li class="secret">
        <div class="pin-card">
          <h3> Top Most Discussed Gist </h3>
          <br/>
          <div class="card">
            <small>~~ @anonym${topSecret.user_id} ~~</small>
    
                      <p>
              ${topSecret.secret.substring(0, 250) + "..."}
              <center>
              <a class="read"
              href="secret/${topSecret.id}"
                style="
                  background: none;
                  font-size: 1rem;
                  padding: 0;
                  font-weight: bold;
                  display: block !important;
                "
                >View secret</a
              >
              </center>
            </p>
    
            <i class="fas fa-thumbtack pinned"></i>
    
          </div>
          </div>
        </li>
    `;
    
    document.getElementById("pinnedButton").addEventListener("click", function(e){
    e.preventDefault()
    
    const target = document.getElementById(`secret${topSecret.id}`);
    
    // Smooth Scroll
    target.scrollIntoView({ behavior: "smooth", block: "center" });
    
    // Add highlight effect
    target.querySelector(".card").classList.add("highlight");
    
    // Remove highlight when scrolling away
    // const observer = new IntersectionObserver(
    //   (entries) => {
    //     entries.forEach((entry) => {
    //       if (!entry.isIntersecting) {
    //         target.classList.remove("highlight");
    //         observer.disconnect(); // Stop observing after removing highlight
    //       }
    //     });
    //   },
    //   { threshold: 0.9 } // Trigger when less than 30% of the element is visible
    // );
    
    // observer.observe(target);
    })
    
    // highlightElement(pinnedSection)
    // Set a timeout to unpin the secret after 24 hours
    setTimeout(() => {
      pinnedSection.innerHTML = "";
    }, 24 * 60 * 60 * 1000); // 24 hours
    };
    
    // Schedule the announcement at 12:00 PM GMT
    const now = new Date();
    const targetTime = new Date();
    targetTime.setUTCHours(12, 0, 0, 0); // 12:00 PM GMT
    const timeUntilAnnouncement = targetTime - now;
    
    setTimeout(fetchTopDiscussedSecret, timeUntilAnnouncement);
    </script>
      <% } %>

      <!-- <a href="/logout" class="btn btn-light btn-lg" role="button">Log Out</a> -->
      <div id="feeds">
        <% if (locals.secrets) { %>
        <form id="navigator">
          <button formaction="dashboard">Dashboard</button>
          <button formaction="feeds">
            AnonymFeeds
            <div class="bottom-line"></div>
          </button>
        </form>
        <div id="spinner" style="display: none">Loading...</div>

        <div id="secrets-container" class="secret"></div>

        <ul id="secrets">
          <!-- <h2>Anonymous Feeds<div class="bottom-line" style="background:  !important;"></div>
                        </h2> -->
          <!-- <div class="bottom-line"></div> -->
          <center>
            <h2 class="display-3">You've discovered our Dark Space!</h2>
            <p>Don't kiss and tell</p>
          </center>
          <br />
          <div id="pinned" class="pinned-secret"></div>
          <% secrets.forEach((secret)=> { %>
          <li class="secret" id="secret<%= secret.id %>">
            <div class="card">
              <% if (secret.category == "funny") { %>
                <span class="tag funny"><i class="fas fa-laugh"></i></span>
              <% } else if (secret.category == "love") { %>
                <span class="tag love"><i class="fas fa-heart"></i></span>
              <% } else if (secret.category == "nasty") { %>
                <span class="tag nasty"><i class="fas fa-skull-crossbones"></i></span>
              <% } else if (secret.category == "sassy") { %>
                <span class="tag sassy"><i class="fas fa-face-meh"></i></span>
              <% } else if (secret.category == "hilarious") { %>
                <span class="tag hilarious"><i class="fas fa-teeth-open"></i></span>
              <% } else if (secret.category == "random") { %>
                <span class="tag random"><i class="fas fa-shuffle"></i></span>
              <% } else { %>
                <span class="tag random"><i class="fas fa-shuffle"></i></span>
              <% } %>
              
              <small>~~ @amebo<%= secret.user_id %> ~~</small>
              <p>
                <span class="content">
                  <% if (secret.secret.split(" ").length > 200) { %>
                    <%= secret.secret.substring(0, 250) + "..." %>
                  <% } else { %>
                    <%= secret.secret %>
                  <% } %>
                </span>
                <% if (secret.secret.split(" ").length > 200) { %>
                
                        <button
                    class="read"
                    style="
                      background: none;
                      font-size: 1rem;
                      padding: 0;
                      font-weight: bold;
                      padding: .75rem !important;
                      font-weight: bold;
                      font-family: 'Courier New', Courier, monospace !important;
                    "
                    data-full="<%= secret.secret %>"
                    data-truncated="<%= secret.secret.substring(0, 250) + '...' %>"
                  >
                      Read More
                  </button>
                 
              
                <% } %>
              </p>
              

              <div class="comment-section" data-secret-id="<%= secret.id %>">
                <button id="commentButton">Comment</button>
                <div class="comment-dropdown" id="commentDropdown">
                  <form
                    class="comment-display"
                    method="POST"
                    id="commentDisplay"
                  ><ul id="comments"></ul></form>
                  <form action="/comment" method="POST" id="comment-form">
                    <input
                      type="hidden"
                      name="id"
                      id="secretId"
                      value="<%= secret.id %>"
                    />
                    <input
                      type="hidden"
                      name="secretUserId"
                      value="<%= secret.user_id %>"
                    />
                    <input
                      type="hidden"
                      name="commentUserId"
                      value="<%= userId %>"
                    />
                    <textarea
                      id="commentInput"
                      placeholder="Write a comment..."
                      name="comment"
                    ></textarea>
                    <!-- <input type="text" id="commentInput" placeholder="Write a comment" name="comment"> -->
                    <button id="postCommentButton">
                      Post
                    </button>
                    <% if (locals.message) { %>
                    <small><%= message %></small>
                    <% } %>
                  </form>
                </div>
              </div>

              <div class="secret-card" data-id="<%= secret.id %>">
                <div class="reactions">
                    <button class="reaction-btn" data-type="like">
                        👍
                        <span class="reaction-count">
                            <%= secret.reactions.like ? secret.reactions.like.count : 0 %>
                        </span>
                    </button>
                    <button class="reaction-btn" data-type="laugh">
                        😂
                        <span class="reaction-count">
                            <%= secret.reactions.laugh ? secret.reactions.laugh.count : 0 %>
                        </span>
                    </button>
                    <button class="reaction-btn" data-type="cry">
                        😢
                        <span class="reaction-count">
                            <%= secret.reactions.cry ? secret.reactions.cry.count : 0 %>
                        </span>
                    </button>
                    <button class="reaction-btn" data-type="gasp">
                        😱
                        <span class="reaction-count">
                            <%= secret.reactions.gasp ? secret.reactions.gasp.count : 0 %>
                        </span>
                    </button>
                </div>
                <button><i class="fas fa-copy"></i></button>
            </div>
            
              <ul class="card-menu">
                <li>
                  <button class="menu-toggle-btn"><i class="fas fa-ellipsis-vertical"></i></button>
                  <ul class="card-menu-content" style="display: none;">
                    <li>
                      <button class="report-btn" data-id="<%= secret.id %>">
                        <i class="fa-regular fa-flag"></i>Report
                      </button>
                    </li>
                  </ul>
                </li>
              </ul>

            </div>
          </li>
          <% }); %>
          <center><p>Reached the bottom. Scroll back to top </p></center>
        </ul>

        <div id="menu-overlay">
          <h1>Choose Category</h1>
        </div>
        <div id="secret-category">
          <button id="toggleCategory">👀</button>
          <form method="POST" id="selectCategory">
            <div class="menu-category">
              <!-- <div class="category-item" category-item>Nasty</div>
                                <div class="category-item" data-category="sassy">Sassy</div>
                                <div class="category-item" data-category="hilarious">Hilarious</div>
                                <div class="category-item" data-category="random">Random</div>
                                <div class="category-item" data-category="vent">Vent</div>
                                <div class="category-item" data-category="love">Love</div> -->
              <button
                formaction=""
                class="category-item circular-menu-button"
                data-category="love"
                style="top: -50px; left: 50px"
              >
                <i class="fas fa-heart"></i>
                <!-- Example icon -->
                <span>Love</span>
              </button>
              <button
                formaction=""
                class="category-item circular-menu-button"
                data-category="sassy"
                style="top: -100px; left: 100px"
              >
                <i class="fas fa-lightbulb"></i>
                <span>Idea</span>
              </button>
              <button
                formaction=""
                class="category-item circular-menu-button"
                data-category="funny"
                style="top: -50px; left: 150px"
              >
                <i class="fas fa-laugh"></i>
                <span>Funny</span>
              </button>
              <button
                formaction=""
                class="category-item circular-menu-button"
                data-category="special"
                style="top: 0px; left: 200px"
              >
                <i class="fas fa-skull-crossbones"></i>
                <span>Nasty</span>
              </button>
              <button
                formaction=""
                class="category-item circular-menu-button"
                data-category="special"
                style="top: 0px; left: 200px"
              >
                <i class="fas fa-face-meh"></i>
                <span>Sassy</span>
              </button>
              <button
                formaction=""
                class="category-item circular-menu-button"
                data-category="special"
                style="top: 0px; left: 200px"
              >
                <i class="fas fa-teeth-open"></i>
                <span>Hilarious</span>
              </button>
              <button
                formaction=""
                class="category-item circular-menu-button"
                data-category="special"
                style="top: 0px; left: 200px"
              >
                <i class="fas fa-head-side-cough"></i>
                <span>Vent</span>
              </button>
            </div>
            <!-- <button style="transform: translateX(-55px);"class="category" formaction="">Hilarious</button> -->
          </form>
        </div>

        <audio
          id="post-sound"
          src="/sounds/system-notification-199277.mp3"
          preload="auto"
        ></audio>
        <script>
          const postSound = document.getElementById("post-sound");
          postSound.play();
        </script>

<script>
  
 

  document.addEventListener("DOMContentLoaded", () => {
    const toggleCategory = document.getElementById("toggleCategory");
    const menuOverlay = document.getElementById("menu-overlay");
    const menu = document.querySelector(".menu-category");
    const spinner = document.getElementById("spinner");
    const secretsContainer = document.getElementById("secrets-container");
    const feeds = document.querySelector("#feeds #secrets");

    let categories = [
      { name: "Love", icon: "fas fa-heart" }, // Example icon for "Love"
      { name: "Idea", icon: "fas fa-lightbulb" }, // Example icon for "Idea"
      { name: "Funny", icon: "fas fa-laugh" }, // Example icon for "Funny"
      { name: "random", icon: "fas fa-shuffle" }, // Example icon for "Special"
      { name: "Nasty", icon: "fas fa-skull-crossbones" },
      { name: "Sassy", icon: "fas fa-face-meh" },
      { name: "Hilarious", icon: "fas fa-teeth-open" },
      { name: "Vent", icon: "fas fa-head-side-cough" },
    ]; // Example categories
    // let categories = []; // Example categories
    let menuOpen = false;
    let angle = 0; // Initial angle for scrolling

    // Populate menu dynamically
    categories.forEach((category, index) => {
      const categoryItem = document.createElement("div");
      categoryItem.classList.add("category-item", "circular-menu-button");
      categoryItem.dataset.category = category.name;
      categoryItem.style.position = "absolute";

      categoryItem.innerHTML = `
          <i class="${category.icon}"></i>
          <span>${category.name}</span>
      `;
      menu.appendChild(categoryItem);
    });

    const categoryItems = document.querySelectorAll(".category-item");

    // Function to position items in a circular layout
    const positionItems = () => {
      const radius = 120; // Radius of the circle
      const step = (Math.PI * 2) / categories.length; // Angle step per item
      categoryItems.forEach((item, index) => {
        const theta = angle + index * step; // Calculate angle for each item
        const x = radius * Math.cos(theta);
        const y = radius * Math.sin(theta);
        item.style.left = `${150 + x}px`; // Offset by menu size (300px diameter)
        item.style.top = `${150 - y}px`; // Offset to center items
      });
    };

    // Open/close menu logic
    toggleCategory.addEventListener("click", (e) => {
      e.preventDefault();
      menuOpen = !menuOpen;

      if (menuOpen) {
        // Show overlay and menu
        menuOverlay.style.display = "flex";
        menu.style.display = "block";
        toggleCategory.style.animationPlayState = "paused";
        // Animate menu items
        categoryItems.forEach((item, index) => {
          setTimeout(() => {
            item.classList.add("active");
          }, index * 100);
        });

        positionItems(); // Position items in a circular layout
      } else {
        // Hide overlay and menu
        menuOverlay.style.display = "none";
        menu.style.display = "none";
        toggleCategory.style.animationPlayState = "running";
        // Reset menu items
        categoryItems.forEach((item) => {
          item.classList.remove("active");
        });
      }
    });

    // Scroll functionality for circular menu
    menu.addEventListener("wheel", (e) => {
      e.preventDefault();
      angle += e.deltaY > 0 ? 0.1 : -0.1; // Adjust angle based on scroll direction
      positionItems(); // Update positions based on new angle
    });

    // Category click event
    categoryItems.forEach((item) => {
      item.addEventListener("click", async (e) => {
        const selectedCategory =
          e.target.closest(".category-item").dataset.category;

        // Show spinner
        spinner.style.display = "block";

        const formAction = selectedCategory.toLowerCase();

        try {
          // Fetch secrets from the server
          const response = await fetch(`/feeds/${formAction}`);
          if (!response.ok) {
            throw new Error("Failed to fetch secrets");
          }

          const secrets = await response.json();

          // Update the secrets container with fetched data

          if (secrets.length > 1) {
            secretsContainer.innerHTML = secrets
              .map(
                (secret) => `
                  <center>
                          <h2 class="display-3">You've discovered some Dark Secrets!</h2>
                          <p>Don't kiss and tell </p>
                      </center>
                  <div class="secret-item card">
                      <span class="tag">${secrets.secrets.category}</span>
                      <small>~~@anonym${secrets.secrets.user_id}~~</small>
                      <p>${secrets.secrets.secret} 
                       <a
                      style="background: none; font-size: 1rem; padding: 0; font-weight: bold; color: "
                      href="secret/${secrets.secrets.id}">Read More
                      </a>
                      </p>
                  </div>
                  <div class="secret-card" data-id="${secrets.secrets.id}">
              <div class="reactions">
                  <button class="reaction-btn" data-type="like">👍 <span class="reaction-count">${
                    secrets.secrets.reactions.like || 0
                  }</span></button>
                  <button class="reaction-btn" data-type="laugh">😂 <span class="reaction-count">${
                    secrets.secrets.reactions.laugh || 0
                  }</span></button>
                  <button class="reaction-btn" data-type="cry">😢 <span class="reaction-count">${
                    secrets.secrets.reactions.cry || 0
                  }</span></button>
                  <button class="reaction-btn" data-type="gasp">😱 <span class="reaction-count">${
                    secrets.secrets.reactions.gasp || 0
                  }</span></button>
              </div>
          </div>`
              )
              .join("");
            feeds.style.display = "none";
          } else if ((secrets.length = 1)) {
            console.log(secrets.secrets[0]);
            secretsContainer.innerHTML = `<center>
                          <h2 class="display-3">${secrets.secrets[0].category} Space!</h2>
                          <p>Don't kiss and tell </p>
                      </center>
                  <div class="secret-item card">
                      <span class="tag">${secrets.secrets[0].category}</span>
                      <small>~~@anonym${secrets.secrets[0].user_id}~~</small>
                      <p>${
                        secrets.secrets[0].secret.substring(0, 250) + "..."
                      }
                           <a
                          style="background: none; font-size: 1rem; padding: 0; font-weight: bold; color: "
                          href="secret/${secrets.secrets[0].id}">Read More
                          </a>
                      </p>
                  </div>
                  <div class="secret-card" data-id="${secrets.secrets[0].id}">
              <div class="reactions">
                  <button class="reaction-btn" data-type="like">👍 <span class="reaction-count">${
                    secrets.reactions.like || 0
                  }</span></button>
                  <button class="reaction-btn" data-type="laugh">😂 <span class="reaction-count">${
                    secrets.reactions.laugh || 0
                  }</span></button>
                  <button class="reaction-btn" data-type="cry">😢 <span class="reaction-count">${
                    secrets.reactions.cry || 0
                  }</span></button>
                  <button class="reaction-btn" data-type="gasp">😱 <span class="reaction-count">${
                    secrets.reactions.gasp || 0
                  }</span></button>
              </div>
          </div>`;
            feeds.style.display = "none";
          } else {
            feeds.style.display = "block";
          }
        } catch (error) {
          console.error(error);
          secretsContainer.innerHTML = `<p class="error">No secrets available</p>`;
        } finally {
          // Hide spinner
          spinner.style.display = "none";
        }
      });
    });
  });
</script>



   

  <script>
       const cards = document.querySelectorAll(".card")
    cards.forEach((card) => {
      const secretId = card.querySelector("#secretId")
      card.querySelector(".report-btn").addEventListener('click', async (e) => {
        const secretId = e.target.getAttribute('data-id');
        const reason = prompt('Why are you reporting this content?'); // Ask for the reason

        if (reason) {
            try {
                const response = await fetch(`/report/secret/${secretId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ reason })
                });

                const data = await response.json();
                if (data.success) {
                    alert('Thank you for reporting. We will review it shortly.');
                } else {
                    alert('Error reporting content');
                }
            } catch (error) {
                console.error('Error reporting:', error);
            }
        }
    });
  });
  </script>

<script>
  const fetchTopDiscussedSecret = async () => {
try {
const response = await fetch("/top-discussed");
const data = await response.json();
const topSecret = data.topSecret;

if (data.success) {
  showAnnouncement(topSecret);
} else {
  console.log("No trending secret to display.");
}
} catch (error) {
console.error("Error fetching top discussed secret:", error);
}
};

const pinSecret = (topSecret) => {
const pinnedSection = document.querySelector(".pinned-secret");
pinnedSection.innerHTML = `
<li class="secret">
  <div class="pin-card">
    <h3> Top Most Discussed Gist </h3>
    <br/>
    <div class="card">
      <small>~~ @anonym${topSecret.user_id} ~~</small>

                <p>
        ${topSecret.secret.substring(0, 250) + "..."}
        <center>
        <a id="pinnedButton" class="read"
        href="#secret${topSecret.id}"
          style="
            background: none;
            font-size: 1rem;
            padding: 0;
            font-weight: bold;
            display: block !important;
          "
          >View secret</a
        >
        </center>
      </p>

      <i class="fas fa-thumbtack pinned"></i>

    </div>
    </div>
  </li>
`;

document.getElementById("pinnedButton").addEventListener("click", function(e){
e.preventDefault()

const target = document.getElementById(`secret${topSecret.id}`);

// Smooth Scroll
target.scrollIntoView({ behavior: "smooth", block: "center" });

// Add highlight effect
target.querySelector(".card").classList.add("highlight");

// Remove highlight when scrolling away
// const observer = new IntersectionObserver(
//   (entries) => {
//     entries.forEach((entry) => {
//       if (!entry.isIntersecting) {
//         target.classList.remove("highlight");
//         observer.disconnect(); // Stop observing after removing highlight
//       }
//     });
//   },
//   { threshold: 0.9 } // Trigger when less than 30% of the element is visible
// );

// observer.observe(target);
})

// highlightElement(pinnedSection)
// Set a timeout to unpin the secret after 24 hours
setTimeout(() => {
pinnedSection.innerHTML = "";
}, 24 * 60 * 60 * 1000); // 24 hours
};

// Schedule the announcement at 12:00 PM GMT
const now = new Date();
const targetTime = new Date();
targetTime.setUTCHours(12, 0, 0, 0); // 12:00 PM GMT
const timeUntilAnnouncement = targetTime - now;

setTimeout(fetchTopDiscussedSecret, timeUntilAnnouncement);
</script>

        <% } else {%> <% } %>
        <hr />
        <br />
        <!-- <a href="/logout" class="btn btn-light btn-lg" role="button">Log Out</a> -->
      </div>
    </div>
  </div>

  <button id="scrollToTopBtn" style="display: none;">^</button>

  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  

    
  <script>
$(document).ready(function () {
  // Handle multiple comment forms
  $(".comment-section").each(function () {
    const commentSection = $(this); // This will target the specific comment section

    commentSection.find("#comment-form").on("submit", function (e) {
      e.preventDefault(); // Prevent the form from submitting the traditional way

      const secretId = commentSection.find("#secretId").val();
      const secretUserId = commentSection.find('[name="secretUserId"]').val();
      const commentUserId = commentSection.find('[name="commentUserId"]').val();
      const comment = commentSection.find("#commentInput").val();
      const commentDisplay = commentSection.find("#commentDisplay");

      $.ajax({
        url: "/comment",
        type: "POST",
        data: {
          id: secretId,
          secretUserId: secretUserId,
          commentUserId: commentUserId,
          comment: comment,
        },
        success: async function (response) {
          // Append the new comment to the commentDisplay div for the specific section
          if (response.success) {
            const newComment = `
              <li class="comment-item">
                <div>
                  <small class="user"><strong>@anonym${commentUserId}</strong></small>
                  <p class="comment">${comment}</p>
                </div>
              </li>
            `;
            commentSection.find("#comments").append(newComment);

            try {
              const fetchResponse = await fetch(`/more/${secretId}`);
              if (!fetchResponse.ok) {
                throw new Error("Failed to fetch secrets");
              }

              const data = await fetchResponse.json();
              const comments = data.comments;
              let commentDisp;
              if (comments) {
                commentDisp = comments.map(
                  (comment) => `
                    <li class="comment-item">
                      <div>
                        <small class="user"><strong>@anonym${comment.user_id}</strong></small>
                        <p class="comment">${comment.comment}</p>
                      </div>
                    </li>
                  `
                );

                commentDisplay.html(`
                  <ul id="comments">
                    <p class="total">All comments: ${data.totalComments}</p>
                    ${commentDisp}
                  </ul>
                `);
              } else {
                commentDisplay.html(`
                  <ul id="comments">
                    <p class="total">${data.noComment}</p>
                  </ul>
                `);
              }
            } catch (err) {
              console.log(err);
            }

            // Clear the comment input after submission
            commentSection.find("#commentInput").val("");
          } else {
            console.log("Failed to post comment:", response.message);
          }
        },
        error: function (err) {
          console.log("Error submitting comment:", err);
        },
      });
    });
  });
});

  </script>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const commentButton = document.querySelectorAll("#commentButton");
      const commentSection = document.querySelectorAll(".comment-section");

      // Toggle comment dropdown visibility

      // commentSection.forEach(async (section, index) => {
      const commentDropdown = document.getElementById("commentDropdown");
      const postCommentButton = document.getElementById("postCommentButton");
      const commentInput = document.getElementById("commentInput");
      const commentDisplay = document.getElementById("commentDisplay");


      commentSection.forEach(async (section, index) => {
        
        const secretId = section.querySelector("#secretId").value;
        try {
          const response = await fetch(`/more/${secretId}`);
          if (!response.ok) {
            throw new Error("Failed to fetch secrets");
          }

          const data = await response.json();
          const comments = data.comments;
          let commentDisp;
          if (comments) {
            commentDisp = comments.map(
              (comment) =>
                
              `<li class="comment-item">
                            <div>
                              <small class="user"><strong>@anonym${comment.user_id}</strong></small>
                              <p class="comment">
                                ${comment.comment}
                              </p>
                            </div>
                             </li>
              `
            );

            section.querySelector("#comments").innerHTML = `
                        <p class="total">All comments: ${data.totalComments}
                        </p>` + commentDisp
                       ;
          } else {
            section.querySelector("#commentDisplay").innerHTML = `
              <ul id="comments">
                        <p class="total">${data.noComment}
                        </p>
                      </ul>
                            `;
          }
        } catch (err) {
          console.log(err);
        }

              section.querySelector("#commentButton").addEventListener("click", (e) => {

          section.querySelector("#commentDropdown").classList.toggle("active");
          // commentDropdown.classList.toggle("active");

          if (section.querySelector("#commentDropdown").classList.contains("active")) {
            section.querySelector("#commentButton").innerHTML = "Close Comments";
          } else {
            section.querySelector("#commentButton").innerHTML = "Comments";
          }

          // commentInput.focus();
        });
      });

      document.querySelectorAll(".reaction-btn").forEach((button) => {
        button.addEventListener("click", async (event) => {
          const btn = event.target.closest(".reaction-btn");
          const type = btn.getAttribute("data-type");
          const secretCard = btn.closest(".secret-card");
          const secretId = secretCard.getAttribute("data-id");

          try {
            const response = await fetch(`/secret/${secretId}/react`, {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ type }),
            });

            const data = await response.json();

            if (data.success) {
              const countSpan = btn.querySelector(".reaction-count");
              countSpan.textContent = data.reactions[type].count || 0; // Use updated count from server
            } else {
              console.error("Failed to update reactions:", data.error);
            }
          } catch (error) {
            console.error("Error updating reactions:", error);
          }
        });
      });
    });


    document.querySelectorAll(".read").forEach((button) => {
    button.addEventListener("click", (e) => {
      const contentSpan = e.target.previousElementSibling;
      const isTruncated = e.target.textContent === "Read More";

      if (isTruncated) {
        // Show full content
        contentSpan.textContent = e.target.dataset.full;
        e.target.textContent = "See Less";
      } else {
        // Reapply truncated content
        contentSpan.textContent = e.target.dataset.truncated;
        e.target.textContent = "Read More";
      }
    });
  });

    document.querySelectorAll(".menu-toggle-btn").forEach((button) => {
    button.addEventListener("click", (e) => {
      const menuContent = e.target.closest(".card-menu").querySelector(".card-menu-content");
      const isVisible = menuContent.style.display === "block";
      
      // Hide all other menus
      document.querySelectorAll(".card-menu-content").forEach((menu) => {
        menu.style.display = "none";
      });

      // Toggle current menu
      menuContent.style.display = isVisible ? "none" : "block";

      // Stop event propagation to prevent immediate hiding
      e.stopPropagation();
    });
  });

  // Hide menu when clicking elsewhere
  document.addEventListener("click", () => {
    document.querySelectorAll(".card-menu-content").forEach((menu) => {
      menu.style.display = "none";
    });
  });


  document.addEventListener("click", function (event) {
  if (event.target.closest(".fas.fa-copy")) {
    const button = event.target.closest(".fas.fa-copy");

    // Find the closest card container to get the content
    const cardContainer = button.closest(".card");

    // Extract the content inside the card container
    const contentToCopy = cardContainer.querySelector(".content")?.innerText;

    if (contentToCopy) {
      if (navigator.clipboard && navigator.clipboard.writeText) {
        // Use Clipboard API if available
        navigator.clipboard
          .writeText(contentToCopy)
          .then(() => {
            alert("Content copied to clipboard!");
          })
          .catch((err) => {
            console.error("Failed to copy: ", err);
            alert("Failed to copy content.");
          });
      } else {
        // Fallback for unsupported browsers
        const tempInput = document.createElement("textarea");
        tempInput.value = contentToCopy;
        document.body.appendChild(tempInput);
        tempInput.select();
        try {
          document.execCommand("copy");
          alert("Content copied to clipboard!");
          button.innerHTML = "Copied !"
        } catch (err) {
          console.error("Fallback copy failed: ", err);
          alert("Copy failed. Please copy manually.");
        }
        document.body.removeChild(tempInput);
      }
    } else {
      console.error("No content to copy.");
      alert("Nothing to copy.");
    }
  }
});

  </script>

<script>
  const header = document.querySelector("header");
  const navigator = document.querySelector("#navigator");
  const nextSection = document
    .querySelector("body")
    .querySelector("section:not(.active)");
  const logo = document.getElementById("logo");

  window.addEventListener("scroll", function () {
    const scrolled = window.scrollY > 0;
    if (scrolled) {
      let body = document.querySelector("body");
      body.style.overflowY = "scroll";
      header.classList.add("scrolled");
      navigator.classList.add("sticky");
    } else {
      header.classList.remove("scrolled");
      navigator.classList.remove("sticky");
    }
  });

</script>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const scrollTopButton = document.getElementById("scrollToTopBtn");
      const nextSection = document
        .querySelector("body")
        .querySelector("li:not(.active)");
      const del = document.querySelectorAll(".delete");

      del.forEach(function (delet) {
        delet.addEventListener("click", function (e) {
          // e.preventDefault();
          if (confirm("Are you sure you want to delete this secret?")) {
            // e.target.href = "/admin/delete";
            console.log("Delete");
          } else {
            e.preventDefault();
          }
        });
      });

      window.addEventListener("scroll", function () {
        if (
          nextSection &&
          nextSection.getBoundingClientRect().top < this.window.innerHeight / 2
        ) {
          scrollTopButton.style.display = "block";
          //ads.style.right = "-.75rem";
        } else {
          scrollTopButton.style.display = "none";
          //ads.style.right = "-180px";
        }
      });

      scrollTopButton.addEventListener("click", function () {
        window.scrollTo({ top: 0, behavior: "smooth" });
        scrollTopButton.style.display = "none";
      });
    });
  </script>

    <script src="/js/app.js"></script>
<script src="/js/tutorial.js"></script>
  <% if (locals.theme) { %>
    <script src="/js/theme.js"></script>
  <% } else {%>
    <script src="/js/defaultTheme.js"></script>
    <% } %>

  <!-- <div class="external-website">
        <iframe 
          src="https://www.google.com" 
          width="100%" 
          height="600px" 
          frameborder="0" 
          scrolling="yes"
          allowfullscreen>
        </iframe>
      </div> -->
</body>
